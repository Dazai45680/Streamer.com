{"version":3,"sources":["images/35.gif","component/Header.js","component/Home.js","component/video.js","component/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","e","preventDefault","react_default","a","createElement","Link","toexact","className","onSubmit","this","handleSubmit","type","placeholder","Component","Home","state","images","_this2","fetch","then","res","json","result","setState","isLoaded","error","_this$state","message","map","image","to","src","alt","Loading_Gif","video","video_link","video_info","anime_name","props","match","params","_this3","anime","ref","node","onClick","handleTogglePlay","onTimeUpdate","handleProgress","onDoubleClick","handleFullscreen","controls","anime_search","console","log","App","component_Header","BrowserRouter","Switch","Route","exact","path","component","Video_page","Search_page","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.731ebbf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/35.285a8c02.gif\";","import React, { Component } from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom'\n\nlet L = '/video/sdoo'\nclass Header extends Component {\n  handleSubmit(e) {\n    e.preventDefault()\n    return <Link toexact={L} > </Link>\n  };\n  render() {\n    \n    return (\n      <div className='navbar navbar-expand-sm navbar-dark bg-dark shadow-sm '>\n        <div className='navbar-brand mr-auto '>\n          Streamer\n       </div>\n        <form className='form-inline' onSubmit={this.handleSubmit}>\n          <input\n            className='form-control bg-dark'\n            type='text'\n            placeholder='Search'\n          />\n        </form>\n      </div>\n    );\n\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport '../App.css';\n// import axios from 'axios';\nimport Loading_Gif from '../images/35.gif'\nimport { setTimeout } from 'timers';\nimport { Link } from 'react-router-dom'\n\nclass Home extends Component {\n\n    state = {\n        images: []\n    }\n    componentDidMount() {\n        fetch(\"requesting_items\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        images: result\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n\n    }\n    render() {\n        const { error, isLoaded, images } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return (<div className=\"Loading\">\n                <img src={Loading_Gif} alt=\"\" />\n                <h1>Loading.....</h1>\n            </div>)\n        } else {\n\n            return (\n                <div className=\"container mr-5 bg-grey\">\n                    {images.map(image => (\n                        <Link to={'/video/' + image}>\n                            <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 roundedm\">\n                                <img className=\"card-img-top img-size\" src={'/' + image} alt=\"\" />\n                                <p>{image}</p>\n                            </div>\n                        </Link>\n                    ))}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n// import axios from 'axios';\r\n\r\n\r\nclass video extends Component {\r\n    state = {\r\n        video_link: null,\r\n        video_info: null\r\n    }\r\n    componentDidMount() {\r\n        let anime_name = this.props.match.params.anime_name;\r\n        fetch(\"/videos/\" + anime_name)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        video_link: result\r\n                    });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n        fetch(\"/info/\" + anime_name)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        video_info: result\r\n                    });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        let video = this.state.video_link;\r\n        let anime = this.state.video_info;\r\n        return (\r\n            <div className='video_image'>\r\n\r\n                <div className=\"mr-8 yellow\">\r\n                    <p className=\"anime-P\">\r\n                        {anime}</p></div>\r\n                <div className=\"container navbar-dark bg-dark  shadow-sm\">\r\n                    <div className='player row'>\r\n                        <div className=\"col-lg-12 video\">\r\n                            <video\r\n                                ref={node => (this.video = node)}\r\n                                onClick={this.handleTogglePlay}\r\n                                onTimeUpdate={this.handleProgress}\r\n                                onDoubleClick={this.handleFullscreen}\r\n                                controls\r\n                            >\r\n                                <source src={video} type=\"video/mp4\" />\r\n                            </video>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default video;\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Loading_Gif from '../images/35.gif'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Home extends Component {\r\n    \r\n    state = {\r\n        images: []\r\n    }\r\n    componentDidMount() {\r\n        let anime_search = this.props.match.params.anime_search;\r\n        fetch(\"/Sear\" + anime_search)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        images: result\r\n                    });\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n\r\n    }\r\n    render() {\r\n        const { error, isLoaded, images } = this.state;\r\n\r\n        console.log(images);\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return (<div className=\"Loading\">\r\n                <img src={Loading_Gif} alt=\"\" />\r\n                <h1>Loading.....</h1>\r\n            </div>)\r\n        } else {\r\n\r\n            return (\r\n                <div className=\"container mr-5 bg-grey\">\r\n                    {images.map(image => (\r\n                        <Link to={image}>\r\n                            <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 roundedm\">\r\n                                <img className=\"card-img-top img-size\" src={'/' + image} alt=\"\" />\r\n                                <p>{image}</p>\r\n                            </div>\r\n                        </Link>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport {BrowserRouter, Route ,Switch} from 'react-router-dom' \nimport Header from './component/Header'\nimport Home from './component/Home'\n//import TS from './component/Tagraba_Style'\nimport Video_page from './component/video.js'\nimport Search_page from './component/Search.js'\nclass App extends Component  {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Home}/> \n          <Route path='/video/:anime_name' component={Video_page}/>\n          <Route path='/search/:anime_search' component={Search_page}/>\n        </Switch>\n        </BrowserRouter>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}