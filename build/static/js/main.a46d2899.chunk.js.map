{"version":3,"sources":["images/douluo-dalu-2nd-season.png","images/35.gif","component/Header.js","component/Home.js","App.js","component/Tagraba_Style.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","type","value","name","id","Component","Home","state","images","_this2","this","setTimeout","fetch","then","res","json","result","setState","isLoaded","error","_this$state","console","log","message","map","image","src","alt","Loading_Gif","App","component_Header","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4FCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sPCiBzBC,mLAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBACFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAgBC,KAAK,SAASC,MAAM,WACrDL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAcC,KAAK,OAAOE,KAAK,GAAGC,GAAG,cAPzCC,uDC2DNC,6MAtDXC,MAAQ,CACJC,OAAQ,uFAEQ,IAAAC,EAAAC,KAChBC,qBAAW,WACPC,MAAM,oBACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACG,SAACG,GACGP,EAAKQ,SAAS,CACVC,UAAU,EACVV,OAAQQ,KAMhB,SAACG,GACGV,EAAKQ,SAAS,CACVC,UAAU,EACVC,aAIb,sCAGE,IAAAC,EAC+BV,KAAKH,MAAjCY,EADHC,EACGD,MAAOD,EADVE,EACUF,SAAUV,EADpBY,EACoBZ,OAGzB,OADAa,QAAQC,IAAId,GACRW,EACOtB,EAAAC,EAAAC,cAAA,qBAAaoB,EAAMI,SAClBL,EAQJrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACVQ,EAAOgB,IAAI,SAAAC,GAAK,OACb5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwB0B,IAAK,IAAID,EAAOE,IAAI,KAC3D9B,EAAAC,EAAAC,cAAA,SAAI0B,OAXR5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACnBH,EAAAC,EAAAC,cAAA,OAAK2B,IAAKE,IAAaD,IAAI,KAC3B9B,EAAAC,EAAAC,cAAA,kCAtCGM,aCiBJwB,GCnBMxB,6LDKjB,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACAlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,cAPzBD,cEKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.a46d2899.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/douluo-dalu-2nd-season.670abe8c.png\";","module.exports = __webpack_public_path__ + \"static/media/35.285a8c02.gif\";","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <h1 className=\"Header_text\">Streamer.com</h1>\n      <div className=\"Search_div\">\n        <input className=\"Search_button\" type=\"button\" value=\"Search\"/>\n        <input className=\"Search_text\" type=\"text\" name=\"\" id=\"\"/>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport '../App.css';\n// import axios from 'axios';\nimport Loading_Gif from '../images/35.gif'\nimport { setTimeout } from 'timers';\nimport img_d from '../images/douluo-dalu-2nd-season.png'\nclass Home extends Component {\n\n    state = {\n        images: []\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            fetch(\"requesting_items\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        images: result\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n        }, 1000);\n    \n    }\n    render() {\n        const { error, isLoaded, images } = this.state;\n\n        console.log(images);\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return (<div className=\"Loading\">\n                <img src={Loading_Gif} alt=\"\" />\n                <h1>Loading.....</h1>\n            </div>)\n        } else {\n \n            return (\n                <div className=\"container mr-5 bg-grey\">\n                    {images.map(image => (\n                        <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 roundedm\">\n                        <img className=\"card-img-top img-size\" src={'/'+image} alt=\"\" />\n                        <p>{image}</p>\n                    </div>\n                    ))}\n                    </div>\n            );\n        }\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport {BrowserRouter, Route ,Switch} from 'react-router-dom' \nimport Header from './component/Header'\nimport Home from './component/Home'\nimport TS from './component/Tagraba_Style'\nclass App extends Component  {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Home}/> \n        </Switch>\n        </BrowserRouter>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport img_d from '../images/douluo-dalu-2nd-season.png'\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container mr-5 bg-grey\">\r\n      <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 rounded\" >\r\n      <img src={img_d} className=\"card-img-top\" alt=\"\" />\r\n      <p>douluo-dalu-2nd-season</p>\r\n      </div>\r\n      <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 rounded\" >\r\n      <img src={img_d} className=\"card-img-top\" alt=\"\" />\r\n      <p>douluo-dalu-2nd-season</p>\r\n      </div>\r\n      <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 rounded\" >\r\n      <img src={img_d} className=\"card-img-top\" alt=\"\" />\r\n      <p>douluo-dalu-2nd-season</p>\r\n      </div>\r\n      <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 rounded\" >\r\n      <img src={img_d} className=\"card-img-top\" alt=\"\" />\r\n      <p>douluo-dalu-2nd-season</p>\r\n      </div>\r\n      <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 rounded\" >\r\n      <img src={img_d} className=\"card-img-top\" alt=\"\" />\r\n      <p>douluo-dalu-2nd-season</p>\r\n      </div>\r\n      <div className=\"card item shadow-lg p-3 mb-3 ml-3 mt-3 rounded\" >\r\n      <img src={img_d} className=\"card-img-top\" alt=\"\" />\r\n      <p>douluo-dalu-2nd-season</p>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}